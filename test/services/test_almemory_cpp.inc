/*
* Generated for ALMemory, then edited by hand for dynamic type methods
*
* Copyright (C) 2010 Aldebaran Robotics
*
*/

//#include <rosbridge/ALMemoryDataChanged.h>
//#include <rosbridge/ALMemoryGetDataString.h>
//#include <rosbridge/ALMemoryGetData.h>
//#include <rosbridge/ALMemoryGetDataListName.h>
//#include <rosbridge/ALMemoryGetDataOnChange.h>
//#include <rosbridge/ALMemoryGetListData.h>
//#include <rosbridge/ALModuleGetMethodHelp.h>
//#include <rosbridge/ALModuleGetModuleHelp.h>
//#include <rosbridge/ALMemoryInsertDataObject.h>
//#include <rosbridge/ALMemoryInsertListData.h>
//#include <rosbridge/ALMemoryInsertObject.h>
//#include <rosbridge/ALMemoryRaiseEvent.h>
//#include <rosbridge/ALMemoryRaiseMicroEvent.h>

//TEST(ALMemory, dataChanged) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryDataChanged>(std::string("NaoQi/ALMemory/dataChanged"));
//  rosbridge::ALMemoryDataChanged msg;
  //msg.request.dataName = ;
  //msg.request.data = ;
  //msg.request.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, getDataString) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryGetDataString>(std::string("NaoQi/ALMemory/getDataString"));
//  rosbridge::ALMemoryGetDataString msg;
  //msg.request.name = ;
  //msg.request.duration = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, getData) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryGetData>(std::string("NaoQi/ALMemory/getData"));
//  rosbridge::ALMemoryGetData msg;
  //msg.request.name = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, getDataListName) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryGetDataListName>(std::string("NaoQi/ALMemory/getDataListName"));
//  rosbridge::ALMemoryGetDataListName msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, getDataOnChange) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryGetDataOnChange>(std::string("NaoQi/ALMemory/getDataOnChange"));
//  rosbridge::ALMemoryGetDataOnChange msg;
  //msg.request.name = ;
  //msg.request.duration = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, getListData) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryGetListData>(std::string("NaoQi/ALMemory/getListData"));
//  rosbridge::ALMemoryGetListData msg;
  //msg.request.name = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, getMethodHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetMethodHelp>(std::string("NaoQi/ALMemory/getMethodHelp"));
//  rosbridge::ALModuleGetMethodHelp msg;
  //msg.request.methodName = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, getModuleHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetModuleHelp>(std::string("NaoQi/ALMemory/getModuleHelp"));
//  rosbridge::ALModuleGetModuleHelp msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, insertDataObject) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryInsertDataObject>(std::string("NaoQi/ALMemory/insertDataObject"));
//  rosbridge::ALMemoryInsertDataObject msg;
  //msg.request.name = ;
  //msg.request.data = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, insertListData) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryInsertListData>(std::string("NaoQi/ALMemory/insertListData"));
//  rosbridge::ALMemoryInsertListData msg;
  //msg.request.listOfInsertData = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, insertObject) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryInsertObject>(std::string("NaoQi/ALMemory/insertObject"));
//  rosbridge::ALMemoryInsertObject msg;
  //msg.request.name = ;
  //msg.request.buffer = ;
  //msg.request.bufferSize = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, raiseEvent) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryRaiseEvent>(std::string("NaoQi/ALMemory/raiseEvent"));
//  rosbridge::ALMemoryRaiseEvent msg;
  //msg.request.name = ;
  //msg.request.data = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMemory, raiseMicroEvent) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMemoryRaiseMicroEvent>(std::string("NaoQi/ALMemory/raiseMicroEvent"));
//  rosbridge::ALMemoryRaiseMicroEvent msg;
  //msg.request.name = ;
  //msg.request.data = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}


