/* Auto-generated by genmsg_cpp for file /home/ckilner/ros/stacks/common_msgs/sensor_msgs/msg/PointCloud2.msg */
#ifndef SENSOR_MSGS_MESSAGE_POINTCLOUD2_H
#define SENSOR_MSGS_MESSAGE_POINTCLOUD2_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "roslib/Header.h"
#include "sensor_msgs/PointField.h"

namespace sensor_msgs
{
template <class ContainerAllocator>
struct PointCloud2_ : public ros::Message
{
  typedef PointCloud2_<ContainerAllocator> Type;

  PointCloud2_()
  : header()
  , height(0)
  , width(0)
  , fields()
  , is_bigendian(false)
  , point_step(0)
  , row_step(0)
  , data()
  , is_dense(false)
  {
  }

  PointCloud2_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , height(0)
  , width(0)
  , fields(_alloc)
  , is_bigendian(false)
  , point_step(0)
  , row_step(0)
  , data(_alloc)
  , is_dense(false)
  {
  }

  typedef  ::roslib::Header_<ContainerAllocator>  _header_type;
   ::roslib::Header_<ContainerAllocator>  header;

  typedef uint32_t _height_type;
  uint32_t height;

  typedef uint32_t _width_type;
  uint32_t width;

  typedef std::vector< ::sensor_msgs::PointField_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointField_<ContainerAllocator> >::other >  _fields_type;
  std::vector< ::sensor_msgs::PointField_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointField_<ContainerAllocator> >::other >  fields;

  typedef uint8_t _is_bigendian_type;
  uint8_t is_bigendian;

  typedef uint32_t _point_step_type;
  uint32_t point_step;

  typedef uint32_t _row_step_type;
  uint32_t row_step;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  data;

  typedef uint8_t _is_dense_type;
  uint8_t is_dense;


  ROSCPP_DEPRECATED uint32_t get_fields_size() const { return (uint32_t)fields.size(); }
  ROSCPP_DEPRECATED void set_fields_size(uint32_t size) { fields.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_fields_vec(std::vector< ::sensor_msgs::PointField_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointField_<ContainerAllocator> >::other > & vec) const { vec = this->fields; }
  ROSCPP_DEPRECATED void set_fields_vec(const std::vector< ::sensor_msgs::PointField_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::PointField_<ContainerAllocator> >::other > & vec) { this->fields = vec; }
  ROSCPP_DEPRECATED uint32_t get_data_size() const { return (uint32_t)data.size(); }
  ROSCPP_DEPRECATED void set_data_size(uint32_t size) { data.resize((size_t)size); }
  ROSCPP_DEPRECATED void get_data_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->data; }
  ROSCPP_DEPRECATED void set_data_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->data = vec; }
private:
  static const char* __s_getDataType_() { return "sensor_msgs/PointCloud2"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "1158d486dd51d683ce2f1be655c3c181"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "#This message holds a collection of nD points, as a binary blob.\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered,\n\
# height is 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if the data is dense (i.e., image-like organized)\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
#This message holds the description of one point entry in the PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration see above\n\
uint32 count     # How many elements in field\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, height);
    ros::serialization::serialize(stream, width);
    ros::serialization::serialize(stream, fields);
    ros::serialization::serialize(stream, is_bigendian);
    ros::serialization::serialize(stream, point_step);
    ros::serialization::serialize(stream, row_step);
    ros::serialization::serialize(stream, data);
    ros::serialization::serialize(stream, is_dense);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, height);
    ros::serialization::deserialize(stream, width);
    ros::serialization::deserialize(stream, fields);
    ros::serialization::deserialize(stream, is_bigendian);
    ros::serialization::deserialize(stream, point_step);
    ros::serialization::deserialize(stream, row_step);
    ros::serialization::deserialize(stream, data);
    ros::serialization::deserialize(stream, is_dense);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(height);
    size += ros::serialization::serializationLength(width);
    size += ros::serialization::serializationLength(fields);
    size += ros::serialization::serializationLength(is_bigendian);
    size += ros::serialization::serializationLength(point_step);
    size += ros::serialization::serializationLength(row_step);
    size += ros::serialization::serializationLength(data);
    size += ros::serialization::serializationLength(is_dense);
    return size;
  }

  typedef boost::shared_ptr< ::sensor_msgs::PointCloud2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msgs::PointCloud2_<ContainerAllocator>  const> ConstPtr;
}; // struct PointCloud2
typedef  ::sensor_msgs::PointCloud2_<std::allocator<void> > PointCloud2;

typedef boost::shared_ptr< ::sensor_msgs::PointCloud2> PointCloud2Ptr;
typedef boost::shared_ptr< ::sensor_msgs::PointCloud2 const> PointCloud2ConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sensor_msgs::PointCloud2_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::sensor_msgs::PointCloud2_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1158d486dd51d683ce2f1be655c3c181";
  }

  static const char* value(const  ::sensor_msgs::PointCloud2_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1158d486dd51d683ULL;
  static const uint64_t static_value2 = 0xce2f1be655c3c181ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msgs::PointCloud2_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/PointCloud2";
  }

  static const char* value(const  ::sensor_msgs::PointCloud2_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sensor_msgs::PointCloud2_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#This message holds a collection of nD points, as a binary blob.\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered,\n\
# height is 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if the data is dense (i.e., image-like organized)\n\
\n\
================================================================================\n\
MSG: roslib/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
#This message holds the description of one point entry in the PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration see above\n\
uint32 count     # How many elements in field\n\
\n\
";
  }

  static const char* value(const  ::sensor_msgs::PointCloud2_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::sensor_msgs::PointCloud2_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.height);
    stream.next(m.width);
    stream.next(m.fields);
    stream.next(m.is_bigendian);
    stream.next(m.point_step);
    stream.next(m.row_step);
    stream.next(m.data);
    stream.next(m.is_dense);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PointCloud2_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sensor_msgs::PointCloud2_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::roslib::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "fields[]" << std::endl;
    for (size_t i = 0; i < v.fields.size(); ++i)
    {
      s << indent << "  fields[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::PointField_<ContainerAllocator> >::stream(s, indent + "    ", v.fields[i]);
    }
    s << indent << "is_bigendian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_bigendian);
    s << indent << "point_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.point_step);
    s << indent << "row_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.row_step);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "is_dense: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_dense);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_MESSAGE_POINTCLOUD2_H

