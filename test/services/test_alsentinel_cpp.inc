/*
* Generated for ALSentinel, then edited by hand for dynamic type methods
*
* Copyright (C) 2010 Aldebaran Robotics
*
*/

//#include <rosbridge/ALSentinelBatteryChargeCellVoltageMinChanged.h>
//#include <rosbridge/ALSentinelBatteryChargeStatusChanged.h>
//#include <rosbridge/ALModuleGetMethodHelp.h>
//#include <rosbridge/ALModuleGetModuleHelp.h>
//#include <rosbridge/ALSentinelOnAccX.h>
//#include <rosbridge/ALSentinelOnAccY.h>
//#include <rosbridge/ALSentinelOnAccZ.h>
//#include <rosbridge/ALSentinelOnBatteryMeasure.h>
//#include <rosbridge/ALSentinelOnMotorError.h>
//#include <rosbridge/ALSentinelOnTemperatureMeasure.h>
//#include <rosbridge/ALSentinelPowerButtonOnPress.h>

//TEST(ALSentinel, BatteryChargeCellVoltageMinChanged) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelBatteryChargeCellVoltageMinChanged>(std::string("NaoQi/ALSentinel/BatteryChargeCellVoltageMinChanged"));
//  rosbridge::ALSentinelBatteryChargeCellVoltageMinChanged msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, BatteryChargeStatusChanged) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelBatteryChargeStatusChanged>(std::string("NaoQi/ALSentinel/BatteryChargeStatusChanged"));
//  rosbridge::ALSentinelBatteryChargeStatusChanged msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, getMethodHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetMethodHelp>(std::string("NaoQi/ALSentinel/getMethodHelp"));
//  rosbridge::ALModuleGetMethodHelp msg;
  //msg.methodName = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, getModuleHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetModuleHelp>(std::string("NaoQi/ALSentinel/getModuleHelp"));
//  rosbridge::ALModuleGetModuleHelp msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, onAccX) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelOnAccX>(std::string("NaoQi/ALSentinel/onAccX"));
//  rosbridge::ALSentinelOnAccX msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, onAccY) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelOnAccY>(std::string("NaoQi/ALSentinel/onAccY"));
//  rosbridge::ALSentinelOnAccY msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, onAccZ) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelOnAccZ>(std::string("NaoQi/ALSentinel/onAccZ"));
//  rosbridge::ALSentinelOnAccZ msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, onBatteryMeasure) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelOnBatteryMeasure>(std::string("NaoQi/ALSentinel/onBatteryMeasure"));
//  rosbridge::ALSentinelOnBatteryMeasure msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, onMotorError) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelOnMotorError>(std::string("NaoQi/ALSentinel/onMotorError"));
//  rosbridge::ALSentinelOnMotorError msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, onTemperatureMeasure) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelOnTemperatureMeasure>(std::string("NaoQi/ALSentinel/onTemperatureMeasure"));
//  rosbridge::ALSentinelOnTemperatureMeasure msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALSentinel, powerButtonOnPress) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALSentinelPowerButtonOnPress>(std::string("NaoQi/ALSentinel/powerButtonOnPress"));
//  rosbridge::ALSentinelPowerButtonOnPress msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}


