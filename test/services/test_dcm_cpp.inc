/*
* Generated for DCM, then edited by hand for dynamic type methods
*
* Copyright (C) 2010 Aldebaran Robotics
*
*/

//#include <rosbridge/DCMCalibration.h>
//#include <rosbridge/DCMCreateAlias.h>
//#include <rosbridge/ALModuleGetMethodHelp.h>
//#include <rosbridge/ALModuleGetModuleHelp.h>
//#include <rosbridge/DCMGetPrefix.h>
//#include <rosbridge/DCMPreferences.h>
//#include <rosbridge/DCMSet.h>
//#include <rosbridge/DCMSetAlias.h>

//TEST(DCM, calibration) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::DCMCalibration>(std::string("NaoQi/DCM/calibration"));
//  rosbridge::DCMCalibration msg;
  //msg.request.calibrationInput = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(DCM, createAlias) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::DCMCreateAlias>(std::string("NaoQi/DCM/createAlias"));
//  rosbridge::DCMCreateAlias msg;
  //msg.request.alias = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(DCM, getMethodHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetMethodHelp>(std::string("NaoQi/DCM/getMethodHelp"));
//  rosbridge::ALModuleGetMethodHelp msg;
  //msg.request.methodName = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(DCM, getModuleHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetModuleHelp>(std::string("NaoQi/DCM/getModuleHelp"));
//  rosbridge::ALModuleGetModuleHelp msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(DCM, getPrefix) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::DCMGetPrefix>(std::string("NaoQi/DCM/getPrefix"));
//  rosbridge::DCMGetPrefix msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(DCM, preferences) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::DCMPreferences>(std::string("NaoQi/DCM/preferences"));
//  rosbridge::DCMPreferences msg;
  //msg.request.action = ;
  //msg.request.target = ;
  //msg.request.keyName = ;
  //msg.request.keyValue = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(DCM, set) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::DCMSet>(std::string("NaoQi/DCM/set"));
//  rosbridge::DCMSet msg;
  //msg.request.commands = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(DCM, setAlias) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::DCMSetAlias>(std::string("NaoQi/DCM/setAlias"));
//  rosbridge::DCMSetAlias msg;
  //msg.request.commands = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}


