/*
* Generated for ALLaser, then edited by hand for dynamic type methods
*
* Copyright (C) 2010 Aldebaran Robotics
*
*/

//#include <rosbridge/ALModuleGetMethodHelp.h>
//#include <rosbridge/ALModuleGetModuleHelp.h>
//#include <rosbridge/ALLaserSetDetectingLength.h>
//#include <rosbridge/ALLaserSetOpeningAngle.h>

//TEST(ALLaser, getMethodHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetMethodHelp>(std::string("NaoQi/ALLaser/getMethodHelp"));
//  rosbridge::ALModuleGetMethodHelp msg;
  //msg.methodName = ;

//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALLaser, getModuleHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetModuleHelp>(std::string("NaoQi/ALLaser/getModuleHelp"));
//  rosbridge::ALModuleGetModuleHelp msg;


//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALLaser, setDetectingLength) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALLaserSetDetectingLength>(std::string("NaoQi/ALLaser/setDetectingLength"));
//  rosbridge::ALLaserSetDetectingLength msg;
  //msg.length_min_l = ;
  //msg.length_max_l = ;

//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALLaser, setOpeningAngle) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALLaserSetOpeningAngle>(std::string("NaoQi/ALLaser/setOpeningAngle"));
//  rosbridge::ALLaserSetOpeningAngle msg;
  //msg.angle_min_f = ;
  //msg.angle_max_f = ;

//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}


