/* Auto-generated by genmsg_cpp for file /home/ckilner/ros/stacks/common_msgs/sensor_msgs/msg/RegionOfInterest.msg */
#ifndef SENSOR_MSGS_MESSAGE_REGIONOFINTEREST_H
#define SENSOR_MSGS_MESSAGE_REGIONOFINTEREST_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"


namespace sensor_msgs
{
template <class ContainerAllocator>
struct RegionOfInterest_ : public ros::Message
{
  typedef RegionOfInterest_<ContainerAllocator> Type;

  RegionOfInterest_()
  : x_offset(0)
  , y_offset(0)
  , height(0)
  , width(0)
  {
  }

  RegionOfInterest_(const ContainerAllocator& _alloc)
  : x_offset(0)
  , y_offset(0)
  , height(0)
  , width(0)
  {
  }

  typedef uint32_t _x_offset_type;
  uint32_t x_offset;

  typedef uint32_t _y_offset_type;
  uint32_t y_offset;

  typedef uint32_t _height_type;
  uint32_t height;

  typedef uint32_t _width_type;
  uint32_t width;


private:
  static const char* __s_getDataType_() { return "sensor_msgs/RegionOfInterest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "878e60591f2679769082130f7aafa371"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# This message is used to specify a region of interest within an image\n\
#\n\
# When used to specify the ROI setting of the camera when the image was taken,\n\
# the height and width fields should either match the height and width\n\
# fields for the associated image or be zeroes to indicate that the full image\n\
# was captured\n\
\n\
uint32 x_offset  #Leftmost pixel of the ROI (0 if the left edge of the image is included in the ROI)\n\
uint32 y_offset  #Topmost pixel of the ROI (0 if the top edge of the image is included in the ROI)\n\
uint32 height    #Height of ROI\n\
uint32 width     #Width of ROI\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, x_offset);
    ros::serialization::serialize(stream, y_offset);
    ros::serialization::serialize(stream, height);
    ros::serialization::serialize(stream, width);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, x_offset);
    ros::serialization::deserialize(stream, y_offset);
    ros::serialization::deserialize(stream, height);
    ros::serialization::deserialize(stream, width);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(x_offset);
    size += ros::serialization::serializationLength(y_offset);
    size += ros::serialization::serializationLength(height);
    size += ros::serialization::serializationLength(width);
    return size;
  }

  typedef boost::shared_ptr< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  const> ConstPtr;
}; // struct RegionOfInterest
typedef  ::sensor_msgs::RegionOfInterest_<std::allocator<void> > RegionOfInterest;

typedef boost::shared_ptr< ::sensor_msgs::RegionOfInterest> RegionOfInterestPtr;
typedef boost::shared_ptr< ::sensor_msgs::RegionOfInterest const> RegionOfInterestConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sensor_msgs::RegionOfInterest_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "878e60591f2679769082130f7aafa371";
  }

  static const char* value(const  ::sensor_msgs::RegionOfInterest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x878e60591f267976ULL;
  static const uint64_t static_value2 = 0x9082130f7aafa371ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/RegionOfInterest";
  }

  static const char* value(const  ::sensor_msgs::RegionOfInterest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message is used to specify a region of interest within an image\n\
#\n\
# When used to specify the ROI setting of the camera when the image was taken,\n\
# the height and width fields should either match the height and width\n\
# fields for the associated image or be zeroes to indicate that the full image\n\
# was captured\n\
\n\
uint32 x_offset  #Leftmost pixel of the ROI (0 if the left edge of the image is included in the ROI)\n\
uint32 y_offset  #Topmost pixel of the ROI (0 if the top edge of the image is included in the ROI)\n\
uint32 height    #Height of ROI\n\
uint32 width     #Width of ROI\n\
\n\
";
  }

  static const char* value(const  ::sensor_msgs::RegionOfInterest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x_offset);
    stream.next(m.y_offset);
    stream.next(m.height);
    stream.next(m.width);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RegionOfInterest_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sensor_msgs::RegionOfInterest_<ContainerAllocator> & v) 
  {
    s << indent << "x_offset: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.x_offset);
    s << indent << "y_offset: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.y_offset);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_MESSAGE_REGIONOFINTEREST_H

