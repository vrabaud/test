/*
* Generated for ALMotionRecorder, then edited by hand for dynamic type methods
*
* Copyright (C) 2010 Aldebaran Robotics
*
*/

//#include <rosbridge/ALMotionRecorderDataChanged.h>
//#include <rosbridge/ALModuleGetMethodHelp.h>
//#include <rosbridge/ALModuleGetModuleHelp.h>
//#include <rosbridge/ALMotionRecorderStartPeriodicRecording.h>
//#include <rosbridge/ALMotionRecorderStopAndGetRecording.h>

//TEST(ALMotionRecorder, dataChanged) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMotionRecorderDataChanged>(std::string("NaoQi/ALMotionRecorder/dataChanged"));
//  rosbridge::ALMotionRecorderDataChanged msg;
  //msg.dataName = ;
  //msg.data = ;
  //msg.message = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMotionRecorder, getMethodHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetMethodHelp>(std::string("NaoQi/ALMotionRecorder/getMethodHelp"));
//  rosbridge::ALModuleGetMethodHelp msg;
  //msg.methodName = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMotionRecorder, getModuleHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetModuleHelp>(std::string("NaoQi/ALMotionRecorder/getModuleHelp"));
//  rosbridge::ALModuleGetModuleHelp msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMotionRecorder, startPeriodicRecording) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMotionRecorderStartPeriodicRecording>(std::string("NaoQi/ALMotionRecorder/startPeriodicRecording"));
//  rosbridge::ALMotionRecorderStartPeriodicRecording msg;
  //msg.jointsToRecord = ;
  //msg.nbPoses = ;
  //msg.extensionAllowed = ;
  //msg.timeStep = ;
  //msg.jointsToReplay = ;
  //msg.replayData = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALMotionRecorder, stopAndGetRecording) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALMotionRecorderStopAndGetRecording>(std::string("NaoQi/ALMotionRecorder/stopAndGetRecording"));
//  rosbridge::ALMotionRecorderStopAndGetRecording msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}


