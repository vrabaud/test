/*
* Generated for ALVideoDevice, then edited by hand for dynamic type methods
*
* Copyright (C) 2010 Aldebaran Robotics
*
*/

//#include <rosbridge/ALVisionVideoInputGetDirectRawImageRemote.h>
//#include <rosbridge/ALVisionVideoInputGetImageRemote.h>
//#include <rosbridge/ALModuleGetMethodHelp.h>
//#include <rosbridge/ALModuleGetModuleHelp.h>
//#include <rosbridge/ALVisionVideoInputResolutionToSizes.h>

//TEST(ALVideoDevice, getDirectRawImageRemote) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALVisionVideoInputGetDirectRawImageRemote>(std::string("NaoQi/ALVideoDevice/getDirectRawImageRemote"));
//  rosbridge::ALVisionVideoInputGetDirectRawImageRemote msg;
  //msg.id = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALVideoDevice, getImageRemote) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALVisionVideoInputGetImageRemote>(std::string("NaoQi/ALVideoDevice/getImageRemote"));
//  rosbridge::ALVisionVideoInputGetImageRemote msg;
  //msg.id = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALVideoDevice, getMethodHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetMethodHelp>(std::string("NaoQi/ALVideoDevice/getMethodHelp"));
//  rosbridge::ALModuleGetMethodHelp msg;
  //msg.methodName = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALVideoDevice, getModuleHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetModuleHelp>(std::string("NaoQi/ALVideoDevice/getModuleHelp"));
//  rosbridge::ALModuleGetModuleHelp msg;


//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALVideoDevice, resolutionToSizes) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALVisionVideoInputResolutionToSizes>(std::string("NaoQi/ALVideoDevice/resolutionToSizes"));
//  rosbridge::ALVisionVideoInputResolutionToSizes msg;
  //msg.resolution = ;

//  bool result = client.call(msg);
//  ASSERT_EQ(result, true);
//}


