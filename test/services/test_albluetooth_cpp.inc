/*
* Generated for ALBluetooth, then edited by hand for dynamic type methods
*
* Copyright (C) 2010 Aldebaran Robotics
*
*/

//#include <rosbridge/ALBluetoothGetAssociatedDeviceList.h>
//#include <rosbridge/ALBluetoothGetDeviceList.h>
//#include <rosbridge/ALModuleGetMethodHelp.h>
//#include <rosbridge/ALModuleGetModuleHelp.h>
//#include <rosbridge/ALBluetoothScan.h>
//#include <rosbridge/ALBluetoothSend.h>
//#include <rosbridge/ALBluetoothSetAssociatedDeviceList.h>

//TEST(ALBluetooth, getAssociatedDeviceList) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALBluetoothGetAssociatedDeviceList>(std::string("NaoQi/ALBluetooth/getAssociatedDeviceList"));
//  rosbridge::ALBluetoothGetAssociatedDeviceList msg;


//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALBluetooth, getDeviceList) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALBluetoothGetDeviceList>(std::string("NaoQi/ALBluetooth/getDeviceList"));
//  rosbridge::ALBluetoothGetDeviceList msg;


//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALBluetooth, getMethodHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetMethodHelp>(std::string("NaoQi/ALBluetooth/getMethodHelp"));
//  rosbridge::ALModuleGetMethodHelp msg;
  //msg.methodName = ;

//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALBluetooth, getModuleHelp) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALModuleGetModuleHelp>(std::string("NaoQi/ALBluetooth/getModuleHelp"));
//  rosbridge::ALModuleGetModuleHelp msg;


//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALBluetooth, scan) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALBluetoothScan>(std::string("NaoQi/ALBluetooth/scan"));
//  rosbridge::ALBluetoothScan msg;


//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALBluetooth, send) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALBluetoothSend>(std::string("NaoQi/ALBluetooth/send"));
//  rosbridge::ALBluetoothSend msg;
  //msg.devicename = ;
  //msg.PWMs = ;
  //msg.servos = ;
  //msg.GPIOs = ;

//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}

//TEST(ALBluetooth, setAssociatedDeviceList) {
//  ros::NodeHandle n;
//  ros::ServiceClient client = n.serviceClient<rosbridge::ALBluetoothSetAssociatedDeviceList>(std::string("NaoQi/ALBluetooth/setAssociatedDeviceList"));
//  rosbridge::ALBluetoothSetAssociatedDeviceList msg;
  //msg.deviceList = ;

//  int result = client.call(msg);
//  ASSERT_EQ(result, true);
//}


